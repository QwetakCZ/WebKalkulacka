@using System.Globalization;
@using WebProject.Models;
@using MathCalculation.Models;
@inject WebProject.Controllers.CalculationController CalculationController
@inject WebProject.Services.EventServices _event
@page "/"

<PageTitle>Kalkulačka</PageTitle>

<h1>Pojďme spolu počítat ...</h1>

<style>
    .calc-button {
        height: 75px; 
    }
</style>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <div class="form-group">
                        <input type="text" class="form-control my-3 text-end w-100" @bind="display" readonly />
                    </div>
                    <div class="row">
                        @foreach (var row in buttonRows)
                        {
                            @foreach (var button in row)
                            {
                                @if (int.TryParse(button, out _))
                                {
                                    <div class="col-3 p-1">
                                        <button class="btn btn-primary calc-button w-100" disabled="@disabledNumber" @onclick="() => OnButtonClick(button)">
                                            @button
                                        </button>
                                    </div>
                                }
                                else if (button == ".")
                                {
                                    <div class="col-3 p-1">
                                        <button class="btn btn-primary calc-button w-100" disabled="@disabledDot" @onclick="() => OnButtonClick(button)">
                                            @button
                                        </button>
                                    </div>

                                }
                                else if (button == "CE")
                                {
                                    <div class="col-3 p-1">
                                        <button class="btn btn-primary calc-button w-100" @onclick="() => OnButtonClick(button)">
                                            @button
                                        </button>
                                    </div>

                                }
                                else
                                {
                                    <div class="col-3 p-1">
                                        <button class="btn btn-secondary calc-button w-100" disabled="@disabledOperation" @onclick="() => OnButtonClick(button)">
                                            @button
                                        </button>
                                    </div>
                                }

                            }

                        }
                    </div>
                    <div class="row">
                        <div class="col-12 p-1">
                            <button class="btn btn-danger calc-button w-100" disabled="@disabledResult" @onclick="() => OnButtonClick('='.ToString())">
                                =
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h3>Poslední výpočty</h3>
                    <table class="table table-striped">
                        <thead class="thead-dark">
                            <tr>
                                <th scope="col">Číslo 1</th>
                                <th scope="col">Operace</th>
                                <th scope="col">Číslo 2</th>
                                <th scope="col">Výsledek</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var calculation in calculations)
                            {
                                <tr>
                                    <td>@calculation.Number1</td>
                                    <td>@operationDictionary[calculation.Operation]</td>
                                    <td>@calculation.Number2</td>
                                    <td>@calculation.Result</td>
                                </tr>
                            }
                        </tbody>

                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string display = string.Empty;
    private bool disabledNumber = false;
    private bool disabledDot = false;
    private bool disabledOperation = true;
    private bool disabledResult = true;
    private CalculationModel model = new CalculationModel();
    Dictionary<Operation, string> operationDictionary = new Dictionary<Operation, string>()
        {
            { Operation.Plus, "+" },
            { Operation.Minus, "-" },
            { Operation.Multiply, "x" },
            { Operation.Divide, "/" }
        };


    MathCalculation.Operation calculation = new MathCalculation.Operation();

    private static List<Calculation> calculations = new List<Calculation>();
    private readonly string[][] buttonRows = new[] //Naplneni matice napisy tlacitek kalkulacky
    {
    new[] { "7", "8", "9", "+"  },
    new[] { "4", "5", "6", "-"  },
    new[] { "1", "2", "3", "x"  },
    new[] { "0", ".", "CE", "/" }
    };

   

    protected override async Task OnInitializedAsync()
    {
        display = string.Empty;
        
        _event.OnReload += LoadLastResult;

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            LoadLastResult(this, EventArgs.Empty);
        }
    }


    private async Task OnButtonClick(string button)
    {


        switch (button)
        {
            case ".":
                if (model == null)
                {
                    model = new CalculationModel();
                    display = string.Empty;
                    model.Operation = null;
                    model.Result = 0;


                }
                CheckDot(display);
                disabledOperation = !CheckOperation();
                disabledDot = true;
                disabledOperation = true;
                break;
            case "-":
                AddOperation("-");
                model.Operation = Operation.Minus;

                break;
            case "+":
                AddOperation("+");
                model.Operation = Operation.Plus;

                break;
            case "x":
                AddOperation("x");
                model.Operation = Operation.Multiply;

                break;
            case "/":
                AddOperation("/");
                model.Operation = Operation.Divide;

                break;

            case "CE":
                if (model == null)
                    model = new CalculationModel();
                display = string.Empty;
                disabledDot = false;
                disabledNumber = false;
                disabledOperation = true;
                model.Operation = null;

                break;

            case "=":

                var numbersArray = GetNumbers();

                model = calculation.GetResult(new CalculationModel { Number1 = numbersArray[0], Number2 = numbersArray[1], Operation = model.Operation });
                if (model != null)
                {
                    await CalculationController.AddToDbAsync(model);
                    _event.Reload();
                    //OnDataChanged?.Invoke();

                }
                display = string.Empty;
                disabledResult = true;
                disabledDot = false;
                if (model == null)
                {
                    display = "ERROR";
                }
                else
                    display = model.Result.ToString();
                model = null;
                break;

            default:
                if (model == null)
                {
                    model = new CalculationModel();
                    display = string.Empty;
                    model.Operation = null;
                    model.Result = 0;


                }
                display += button;
                disabledOperation = !CheckOperation();
                disabledResult = !IsCalculationComplete(display);
                break;
        }
    }

    private void AddOperation(string _operation)
    {
        if (model.Operation != null) // Kontrola zda uz byla zvolena operace - pripadne prepsani na novou
        {
            display = display.Remove(display.Length - 3);
        }
        display += " " + _operation + " ";
        disabledDot = false;
    }

    private List<double> GetNumbers()
    {
        string[] parts = display.Split(' ');
        List<double> numbers = new List<double>();

        foreach (var part in parts)
        {
            if (double.TryParse(part, NumberStyles.Any, CultureInfo.InvariantCulture, out double number))
            {
                numbers.Add(number);
            }
        }

        return numbers;
    }

    //Kontorla, zda je format retezce spravny pro vypocet
    private bool IsCalculationComplete(string stringNumber)
    {
        string[] parts = display.Split(' ');

        if (parts.Length == 3)
        {
            return true;
        }

        return false;
    }
    //Kontrola zda cislo obsahuje desetinnou tecku
    private void CheckDot(string stringNumber)
    {
        int lenght = stringNumber.Length;

        if ((lenght > 0) && (char.IsDigit(stringNumber[lenght - 1])))
        {
            display += ".";
        }
        else
        {
            display += "0.";
        }
    }
    //Kontrola zda byla zadana operace
    private bool CheckOperation()
    {
        string[] parts = display.Split(' ');
        int count = parts.Length;
        if (count <= 2)
        {
            return true;
        }
        else
            return false;
    }

    private async void LoadLastResult(object? sender, EventArgs e)
    {
        calculations = await CalculationController.GetLastCalculation();
        StateHasChanged();

    }
}
