@using System.Globalization
@using WebProject.Models
@inject WebProject.Controllers.CalculationController CalculationController
@page "/"

<PageTitle>Kalkulačka</PageTitle>

<h1>Pojďme spolu počítat ...</h1>

<style>
    .calc-button {
        height: 75px; /* Změňte výšku dle potřeby */
    }
</style>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <div class="form-group">
                        <input type="text" class="form-control my-3 text-end w-100" @bind="display" readonly />
                    </div>
                    <div class="row">
                        @foreach (var row in buttonRows)
                        {
                            @foreach (var button in row)
                            {
                                @if (int.TryParse(button, out _))
                                {
                                    <div class="col-3 p-1">
                                        <button class="btn btn-primary calc-button w-100" disabled="@disabledNumber" @onclick="() => OnButtonClick(button)">
                                            @button
                                        </button>
                                    </div>
                                }
                                else if (button == ".")
                                {
                                    <div class="col-3 p-1">
                                        <button class="btn btn-primary calc-button w-100" disabled="@disabledDot" @onclick="() => OnButtonClick(button)">
                                            @button
                                        </button>
                                    </div>

                                }
                                else if (button == "CE")
                                {
                                    <div class="col-3 p-1">
                                        <button class="btn btn-primary calc-button w-100" @onclick="() => OnButtonClick(button)">
                                            @button
                                        </button>
                                    </div>

                                }
                                else
                                {
                                    <div class="col-3 p-1">
                                        <button class="btn btn-secondary calc-button w-100" disabled="@disabledOperation" @onclick="() => OnButtonClick(button)">
                                            @button
                                        </button>
                                    </div>
                                }

                            }

                        }
                    </div>
                    <div class="row">
                        <div class="col-12 p-1">
                            <button class="btn btn-danger calc-button w-100" disabled="@disabledResult" @onclick="() => OnButtonClick('='.ToString())">
                                =
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h3>Poslední výpočty</h3>
                    <table class="table table-striped">
                        <thead class="thead-dark">
                            <tr>
                                <th scope="col">Číslo 1</th>
                                <th scope="col">Operace</th>
                                <th scope="col">Číslo 2</th>
                                <th scope="col">Výsledek</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var calculation in calculations)
                        {
                            <tr>
                                <td>@calculation.Numbers[0]</td>
                                <td>@calculation.Operation</td>
                                <td>@calculation.Numbers[1]</td>
                                <td>@calculation.Result</td>
                            </tr>
                        }
                        </tbody>

                    </table>
                </div>
            </div>
        </div>
    </div>


    @code {
        private string display = string.Empty;
        private bool disabledNumber = false;
        private bool disabledDot = false;
        private bool disabledOperation = true;
        private bool disabledResult = true;
        private double number1 = 0;
        private double number2 = 0;
        private double result = 0;
        private string operation = string.Empty;
        private List<Calculation> calculations = new List<Calculation>();


        protected override async Task OnInitializedAsync()
        {
            display = string.Empty;
            calculations = await CalculationController.GetLastCalculation();
        }

        private readonly string[][] buttonRows = new[] //Naplneni matice napisy tlacitek kalkulacky
        {
    new[] { "7", "8", "9", "+"  },
    new[] { "4", "5", "6", "-"  },
    new[] { "1", "2", "3", "x"  },
    new[] { "0", ".", "CE", "/" }
    };

        private async Task OnButtonClick(string button)
        {


            switch (button)
            {
                case ".":
                    if (result != 0)
                    {
                        display = string.Empty;
                        operation = string.Empty;
                        result = 0;
                    }
                    CheckDot(display);
                    disabledOperation = !CheckOperation();
                    disabledDot = true;
                    disabledOperation = true;
                    break;
                case "-":
                    AddOperation("-");
                    operation = "-";

                    break;
                case "+":
                    AddOperation("+");
                    operation = "+";
                    break;
                case "x":
                    AddOperation("x");
                    operation = "x";
                    break;
                case "/":
                    AddOperation("/");
                    operation = "/";
                    break;

                case "CE":
                    display = string.Empty;
                    disabledDot = false;
                    disabledNumber = false;
                    disabledOperation = true;
                    operation = string.Empty;
                    break;

                case "=":
                    result = await CalculationController.Result(GetNumbers(), operation); // Vypocet vysledku
                    display = string.Empty;
                    disabledResult = true;
                    disabledDot = false;
                    display = result.ToString();

                    break;

                default:
                    if (result != 0)
                    {
                        display = string.Empty;
                        operation = string.Empty;
                        result = 0;
                    }
                    display += button;
                    disabledOperation = !CheckOperation();
                    disabledResult = !IsCalculationComplete(display);
                    break;
            }
        }

        private void AddOperation(string _operation)
        {
            if (operation != string.Empty) // Kontrola zda uz byla zvolena operace - pripadne prepsani na novou
            {
                display = display.Remove(display.Length - 3);
            }
            display += " " + _operation + " ";
            disabledDot = false;
        }

        private double[] GetNumbers()
        {
            string[] parts = display.Split(' ');

            // Kontrola zda jsou zadana dve cisla a operace
            if (parts.Length != 3)
            {
                throw new FormatException("Vstupní řetězec nemá očekávaný formát 'číslo operátor číslo'.");
            }

            double[] numbers = new double[2];
            if (!double.TryParse(parts[0], NumberStyles.Any, CultureInfo.InvariantCulture, out numbers[0]))
            {
                throw new FormatException($"Nepodařilo se převést první část '{parts[0]}' na číslo.");
            }

            if (!double.TryParse(parts[2], NumberStyles.Any, CultureInfo.InvariantCulture, out numbers[1]))
            {
                throw new FormatException($"Nepodařilo se převést třetí část '{parts[2]}' na číslo.");

            }

            return numbers;
        }
        //Kontorla, zda je format retezce spravny pro vypocet
        private bool IsCalculationComplete(string stringNumber)
        {
            string[] parts = display.Split(' ');

            if (parts.Length == 3)
            {
                return true;
            }

            return false;
        }
        //Kontrola zda cislo obsahuje desetinnou tecku
        private void CheckDot(string stringNumber)
        {
            int lenght = stringNumber.Length;

            if ((lenght > 0) && (char.IsDigit(stringNumber[lenght - 1])))
            {
                display += ".";
            }
            else
            {
                display += "0.";
            }
        }
        //Kontrola zda byla zadana operace
        private bool CheckOperation()
        {
            string[] parts = display.Split(' ');
            int count = parts.Length;
            if (count <= 2)
            {
                return true;
            }
            else
                return false;
        }
    }
